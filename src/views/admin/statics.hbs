<div class="container-fluid px-4">
    <h1 class="mt-4">Satics</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/admin">Dashboard</a></li>
        <li class="breadcrumb-item active">Statics</li>
    </ol>
    <div id="search" class="row">
        <div class="form-group col-6">
            <label for="dateRange">Select date range</label>
            <input type="text" name="dateRange" class="form-control" id="dateRange" placeholder="Enter date range">
        </div>
    </div>
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-chart-area me-1"></i>
            New users per month
        </div>
        <div class="card-body"><canvas id="monthlyUsers" width="100%" height="30"></canvas></div>
        <div class="card-footer small text-muted">Lastest update</div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-bar me-1"></i>
                    Monthly order
                </div>
                <div class="card-body"><canvas id="monthlyOrders" width="100%" height="50"></canvas></div>
                <div class="card-footer small text-muted">Lastest update</div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-pie me-1"></i>
                    Order status
                </div>
                <div class="card-body"><canvas id="percentOrders" width="100%" height="50"></canvas></div>
                <div class="card-footer small text-muted">Lastest update</div>
            </div>
        </div>
    </div>
</div>
<script>
    const update = async ({ statusOrders = {}, monthlyOrders = {}, monthlyUsers = {} }) => {
        Chart.defaults.global.defaultFontFamily = '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
        Chart.defaults.global.defaultFontColor = '#292b2c';

        // Pie Chart Example
        const a = document.getElementById("percentOrders");
        const percentOrdersChart = new Chart(a, {
            type: 'pie',
            data: {
                labels: ["Shipped", "Cancel", "Proccess", "Under review"],
                datasets: [{
                    data: [statusOrders?.Shipped || 0, statusOrders?.Cancel || 0, statusOrders?.Proccess || 0, statusOrders?.Review || 0],
                    backgroundColor: ['#007bff', '#dc3545', '#ffc107', '#28a745'],
                }],
            },
        });

        const maxB = Math.max(...Object.entries(monthlyOrders).map(([k, v]) => v)) || 10;
        const b = document.getElementById("monthlyOrders");
        const monthlyOrdersChart = new Chart(b, {
            type: 'bar',
            data: {
                labels: Object.entries(monthlyOrders).map(([k, v]) => `${k}`),
                datasets: [{
                    label: "Revenue",
                    backgroundColor: "rgba(2,117,216,1)",
                    borderColor: "rgba(2,117,216,1)",
                    data: Object.entries(monthlyOrders).map(([k, v]) => v),
                }],
            },
            options: {
                scales: {
                    xAxes: [{
                        time: {
                            unit: 'month'
                        },
                        gridLines: {
                            display: false
                        },
                        ticks: {
                            maxTicksLimit: 12
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            min: 0,
                            max: maxB,
                            maxTicksLimit: 5
                        },
                        gridLines: {
                            display: true
                        }
                    }]
                },
                legend: {
                    display: false
                }
            }
        });

        const maxC = Math.max(...Object.entries(monthlyUsers).map(([k, v]) => v)) || 10;
        const c = document.getElementById("monthlyUsers");
        const monthlyUsersChart = new Chart(c, {
            type: 'line',
            data: {
                labels: Object.entries(monthlyUsers).map(([k, v]) => `${k}`),
                datasets: [{
                    label: "Sessions",
                    lineTension: 0.3,
                    backgroundColor: "rgba(2,117,216,0.2)",
                    borderColor: "rgba(2,117,216,1)",
                    pointRadius: 5,
                    pointBackgroundColor: "rgba(2,117,216,1)",
                    pointBorderColor: "rgba(255,255,255,0.8)",
                    pointHoverRadius: 5,
                    pointHoverBackgroundColor: "rgba(2,117,216,1)",
                    pointHitRadius: 50,
                    pointBorderWidth: 2,
                    data: Object.entries(monthlyUsers).map(([k, v]) => v),
                }]
            },
            options: {
                scales: {
                    xAxes: [{
                        time: {
                            unit: 'date'
                        },
                        gridLines: {
                            display: false
                        },
                        ticks: {
                            maxTicksLimit: 7
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            min: 0,
                            max: maxC,
                            maxTicksLimit: 5
                        },
                        gridLines: {
                            color: "rgba(0, 0, 0, .125)",
                        }
                    }],
                },
                legend: {
                    display: false
                }
            }
        });

    }
    const search = async (dateRange = "") => {
        $("#main-loading").addClass("show");
        const res = await fetch(`/admin/statics/build?dateRange=${dateRange}`).then(res => res.json());
        $("#main-loading").removeClass("show");
        if (res.errorCode == 0) {
            update(res.data)
        } else {
            alert(res.message)
        }
    }
    $(document).ready(async () => {
        $('input[name="dateRange"]').daterangepicker({
            autoUpdateInput: false,
            locale: {
                cancelLabel: 'Clear',
                format: 'DD/MM/YYYY',
            }
        });
        $('input[name="dateRange"]').on('apply.daterangepicker', function (ev, picker) {
            const dateRange = picker.startDate.format('DD/MM/YYYY') + ' - ' + picker.endDate.format('DD/MM/YYYY');
            $(this).val(dateRange);
            search(dateRange)
        });

        $('input[name="dateRange"]').on('cancel.daterangepicker', function (ev, picker) {
            $(this).val('');
        });
        search()
    })
</script>